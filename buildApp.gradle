apply {
    plugin "com.android.application"
    from  "${rootDir.path}/buildCommon.gradle"
    if (Config.depConfig.plugin_api.isApply) {
        plugin Config.depConfig.plugin_api.pluginId
    }
    if (Config.depConfig.plugin_bus.isApply) {
        plugin Config.depConfig.plugin_bus.pluginId
    }

     plugin "dagger.hilt.android.plugin"
}

configSigning()
configApkName()

if (Config.depConfig.plugin_bus.isApply) {
    bus {
        busUtilsClass "com.bsnl.base.utils.BusUtils"
    }
}

if (Config.depConfig.plugin_api.isApply) {

    api {
        apiUtilsClass "com.bsnl.base.utils.ApiUtils"
    }

}



android {
    defaultConfig {
        applicationId Config.applicationId + suffix
        targetSdkVersion Config.targetSdkVersion
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
            resValue "string", "app_name", Config.appName + suffix + ".debug"
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", Config.appName + suffix
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "8g"
        maxProcessCount 8
        dexInProcess = true
    }
}


dependencies {
    // LeakCanary
    debugImplementation Config.depConfig.leakcanary.dep

    // 根据 Config.pkgConfig 来依赖所有 pkg
    for (def entrySet : ConfigUtils.getApplyPkgs().entrySet()) {
        api entrySet.value.dep
    }

    if(Config.depConfig.lib_faster!=null ){
        implementation Config.depConfig.lib_faster.dep
    }
    api Config.depConfig.hilt_daggerRuntime.dep
    api Config.depConfig.hilt_viewModule.dep
    kapt Config.depConfig.hilt_compiler.dep
    kapt Config.depConfig.hilt_daggerCompiler.dep

    api Config.depConfig.room_runtime.dep
    api Config.depConfig.room_ktx.dep
    kapt Config.depConfig.room_compiler.dep
//    if (Config.depConfig.feature_mock.isApply) {
//        api Config.depConfig.feature_mock.dep
//    }
}


/**
 * 获取前缀
 * @return
 */
def getSuffix() {
    if (project.name == "feature_launcher_app") return ""
    return "." + project.name.substring("feature_".length(), project.name.length() - "_app".length())
}


/**
 * 配置签名
 * @return
 */
def configSigning() {

    File signPropertiesFile = file("${rootDir.path}/sign/keystore.properties")
    if (!signPropertiesFile.exists()) return

    GLog.d("${project.toString()} sign start...")
    project.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
    GLog.d("${project.toString()} sign end...")
}


/**
 * 配置apk命名
 * @return
 */
def configApkName() {
    project.android.applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            def artifact = variant.getPackageApplicationProvider().get()
            artifact.outputDirectory = new File("${rootDir.path}/apk")
            artifact.outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = "util" + suffix +
                        (variant.flavorName == "" ? "" : ("_" + variant.flavorName)) +
                        "_" + variant.versionName.replace(".", "_") +
                        "_" + variant.buildType.name +
                        ".apk"
            }
        }
    }
}